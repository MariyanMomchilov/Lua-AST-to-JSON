	block 				:=  stat* [laststat] 
	laststat 			:=  'return' [exprlist] | 'break'
	stat 				:=  varlist '=' exprlist 							| 
					    functioncall 								| 
					    'do' block 'end' 								| 
					    'while' expr 'do' block 'end' 						| 
					    'repeat' block 'until' expr 						| 
					    'if' expr 'then' block ('elseif' expr 'then' block)* ['else' block] 'end' 	| 
					    'for' Id '=' expr ',' expr (',' expr)? 'do' block 'end' 			| 
					     //'for' namelist 'in'	 exprlist 'do' block 'end' 			| 
					    'function' funcname funcbody 						| 
					    'local' 'function' Id funcbody 						| 
					    'local' namelist ['=' exprlist] 
	
	varlist				:= var (',' var)*
	namelist 			:= Id (',' Id)*
	exprlist			:= expr (',' expr)*
	
	expr 				:= funcExpr | prefixExpr | tableConstructor | binExpr*

	funcExpr 			:= 'function' funcbody
	funcbody 			:= '(' [parlist] ')' block 'end'
	funcname 			:= Id ('.' Id)*
	parlist				:= namelist [',' '...'] | '...'

	functionCall 			:= varOrExp nameAndArgs nameAndArgs*
	prefExpr 			:=  varOrExp nameAndArgs* 

	tableConstructor 		:= '{' [fieldList] '}' 
	fieldList 			:= field (fieldSep field)* [fieldSep];
	field 				:= '[' expr ']' '=' expr | Id '=' expr | expr
	fieldSep 			:= ',' | ';';


	varOrExpr			:= termExpr | var | '(' expr ')'
	var 				:= (Id | '(' expr ')' varSuffix) varSuffix*
	varSuffix			:= nameAndArgs* ('[' expr ']' | '.' Id)
	nameAndArgs			:= args
	args 				:= '(' [exprlist] ')' | tableConstructor | string

	binExpr				:= E ('or' E)*
	E 				:= T ('and' T)*
	T				:= F (rel F)*
	F				:= G (sum G)*	
	G 				:= H (prod H)*
	H 				:= [unary] prefExpr

	

	rel 				:= <   >   <=  >=  ~=  ==
	sum				:=  +  -  ..	
	prod 				:= ^ * /
	unary				:= not -
	
